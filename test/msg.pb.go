// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test/msg.proto

/*
	Package test is a generated protocol buffer package.

	It is generated from these files:
		test/msg.proto

	It has these top-level messages:
		User
*/
package test

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type User_UserName_Type int32

const (
	User_UserName_UNKNOWN User_UserName_Type = 0
	User_UserName_A       User_UserName_Type = 1
)

var User_UserName_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "A",
}
var User_UserName_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"A":       1,
}

func (x User_UserName_Type) String() string {
	return proto.EnumName(User_UserName_Type_name, int32(x))
}
func (User_UserName_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorMsg, []int{0, 0, 0} }

type User struct {
	String_    string                    `protobuf:"bytes,1,opt,name=String,proto3" json:"String,omitempty"`
	Strings    []string                  `protobuf:"bytes,2,rep,name=Strings" json:"Strings,omitempty"`
	Sint32     int32                     `protobuf:"zigzag32,3,opt,name=Sint32,proto3" json:"Sint32,omitempty"`
	Sint32S    []int32                   `protobuf:"zigzag32,4,rep,packed,name=Sint32s" json:"Sint32s,omitempty"`
	Sint64     int64                     `protobuf:"zigzag64,5,opt,name=Sint64,proto3" json:"Sint64,omitempty"`
	Sint64S    []int64                   `protobuf:"zigzag64,6,rep,packed,name=Sint64s" json:"Sint64s,omitempty"`
	Int32      int32                     `protobuf:"varint,7,opt,name=Int32,proto3" json:"Int32,omitempty"`
	Int32S     []int32                   `protobuf:"varint,8,rep,packed,name=Int32s" json:"Int32s,omitempty"`
	Int64      int64                     `protobuf:"varint,9,opt,name=Int64,proto3" json:"Int64,omitempty"`
	Int64S     []int64                   `protobuf:"varint,10,rep,packed,name=Int64s" json:"Int64s,omitempty"`
	Uint32     uint32                    `protobuf:"varint,11,opt,name=Uint32,proto3" json:"Uint32,omitempty"`
	Uint32S    []uint32                  `protobuf:"varint,12,rep,packed,name=Uint32s" json:"Uint32s,omitempty"`
	Uint64     uint64                    `protobuf:"varint,13,opt,name=Uint64,proto3" json:"Uint64,omitempty"`
	Uint64S    []uint64                  `protobuf:"varint,14,rep,packed,name=Uint64s" json:"Uint64s,omitempty"`
	Fixed32    uint32                    `protobuf:"fixed32,15,opt,name=Fixed32,proto3" json:"Fixed32,omitempty"`
	Fixed32S   []uint32                  `protobuf:"fixed32,16,rep,packed,name=Fixed32s" json:"Fixed32s,omitempty"`
	Fixed64    uint64                    `protobuf:"fixed64,17,opt,name=Fixed64,proto3" json:"Fixed64,omitempty"`
	Fixed64S   []uint64                  `protobuf:"fixed64,18,rep,packed,name=Fixed64s" json:"Fixed64s,omitempty"`
	Sfixed32   int32                     `protobuf:"fixed32,19,opt,name=Sfixed32,proto3" json:"Sfixed32,omitempty"`
	Sfixed32S  []int32                   `protobuf:"fixed32,20,rep,packed,name=Sfixed32s" json:"Sfixed32s,omitempty"`
	Sfixed64   int64                     `protobuf:"fixed64,21,opt,name=Sfixed64,proto3" json:"Sfixed64,omitempty"`
	Sfixed64S  []int64                   `protobuf:"fixed64,22,rep,packed,name=Sfixed64s" json:"Sfixed64s,omitempty"`
	Float      float32                   `protobuf:"fixed32,23,opt,name=Float,proto3" json:"Float,omitempty"`
	Floats     []float32                 `protobuf:"fixed32,24,rep,packed,name=Floats" json:"Floats,omitempty"`
	Double     float64                   `protobuf:"fixed64,25,opt,name=Double,proto3" json:"Double,omitempty"`
	Doubles    []float64                 `protobuf:"fixed64,26,rep,packed,name=Doubles" json:"Doubles,omitempty"`
	Bool       bool                      `protobuf:"varint,27,opt,name=Bool,proto3" json:"Bool,omitempty"`
	Bools      []bool                    `protobuf:"varint,28,rep,packed,name=Bools" json:"Bools,omitempty"`
	Bytes      []byte                    `protobuf:"bytes,29,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	Bytess     [][]byte                  `protobuf:"bytes,30,rep,name=Bytess" json:"Bytess,omitempty"`
	IntsPacked []int32                   `protobuf:"varint,31,rep,packed,name=IntsPacked" json:"IntsPacked,omitempty"`
	Int32Map   map[int32]string          `protobuf:"bytes,32,rep,name=Int32map" json:"Int32map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Stringmap  map[string]string         `protobuf:"bytes,33,rep,name=Stringmap" json:"Stringmap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Msg        *User_UserName            `protobuf:"bytes,34,opt,name=Msg" json:"Msg,omitempty"`
	Msgs       []*User_UserName          `protobuf:"bytes,35,rep,name=Msgs" json:"Msgs,omitempty"`
	Any        *google_protobuf.Any      `protobuf:"bytes,36,opt,name=Any" json:"Any,omitempty"`
	Msgmap     map[string]*User_UserName `protobuf:"bytes,37,rep,name=Msgmap" json:"Msgmap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{0} }

func (m *User) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

func (m *User) GetStrings() []string {
	if m != nil {
		return m.Strings
	}
	return nil
}

func (m *User) GetSint32() int32 {
	if m != nil {
		return m.Sint32
	}
	return 0
}

func (m *User) GetSint32S() []int32 {
	if m != nil {
		return m.Sint32S
	}
	return nil
}

func (m *User) GetSint64() int64 {
	if m != nil {
		return m.Sint64
	}
	return 0
}

func (m *User) GetSint64S() []int64 {
	if m != nil {
		return m.Sint64S
	}
	return nil
}

func (m *User) GetInt32() int32 {
	if m != nil {
		return m.Int32
	}
	return 0
}

func (m *User) GetInt32S() []int32 {
	if m != nil {
		return m.Int32S
	}
	return nil
}

func (m *User) GetInt64() int64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

func (m *User) GetInt64S() []int64 {
	if m != nil {
		return m.Int64S
	}
	return nil
}

func (m *User) GetUint32() uint32 {
	if m != nil {
		return m.Uint32
	}
	return 0
}

func (m *User) GetUint32S() []uint32 {
	if m != nil {
		return m.Uint32S
	}
	return nil
}

func (m *User) GetUint64() uint64 {
	if m != nil {
		return m.Uint64
	}
	return 0
}

func (m *User) GetUint64S() []uint64 {
	if m != nil {
		return m.Uint64S
	}
	return nil
}

func (m *User) GetFixed32() uint32 {
	if m != nil {
		return m.Fixed32
	}
	return 0
}

func (m *User) GetFixed32S() []uint32 {
	if m != nil {
		return m.Fixed32S
	}
	return nil
}

func (m *User) GetFixed64() uint64 {
	if m != nil {
		return m.Fixed64
	}
	return 0
}

func (m *User) GetFixed64S() []uint64 {
	if m != nil {
		return m.Fixed64S
	}
	return nil
}

func (m *User) GetSfixed32() int32 {
	if m != nil {
		return m.Sfixed32
	}
	return 0
}

func (m *User) GetSfixed32S() []int32 {
	if m != nil {
		return m.Sfixed32S
	}
	return nil
}

func (m *User) GetSfixed64() int64 {
	if m != nil {
		return m.Sfixed64
	}
	return 0
}

func (m *User) GetSfixed64S() []int64 {
	if m != nil {
		return m.Sfixed64S
	}
	return nil
}

func (m *User) GetFloat() float32 {
	if m != nil {
		return m.Float
	}
	return 0
}

func (m *User) GetFloats() []float32 {
	if m != nil {
		return m.Floats
	}
	return nil
}

func (m *User) GetDouble() float64 {
	if m != nil {
		return m.Double
	}
	return 0
}

func (m *User) GetDoubles() []float64 {
	if m != nil {
		return m.Doubles
	}
	return nil
}

func (m *User) GetBool() bool {
	if m != nil {
		return m.Bool
	}
	return false
}

func (m *User) GetBools() []bool {
	if m != nil {
		return m.Bools
	}
	return nil
}

func (m *User) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *User) GetBytess() [][]byte {
	if m != nil {
		return m.Bytess
	}
	return nil
}

func (m *User) GetIntsPacked() []int32 {
	if m != nil {
		return m.IntsPacked
	}
	return nil
}

func (m *User) GetInt32Map() map[int32]string {
	if m != nil {
		return m.Int32Map
	}
	return nil
}

func (m *User) GetStringmap() map[string]string {
	if m != nil {
		return m.Stringmap
	}
	return nil
}

func (m *User) GetMsg() *User_UserName {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *User) GetMsgs() []*User_UserName {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func (m *User) GetAny() *google_protobuf.Any {
	if m != nil {
		return m.Any
	}
	return nil
}

func (m *User) GetMsgmap() map[string]*User_UserName {
	if m != nil {
		return m.Msgmap
	}
	return nil
}

type User_UserName struct {
	First string             `protobuf:"bytes,1,opt,name=First,proto3" json:"First,omitempty"`
	Last  string             `protobuf:"bytes,2,opt,name=Last,proto3" json:"Last,omitempty"`
	T     User_UserName_Type `protobuf:"varint,4,opt,name=T,proto3,enum=test.User_UserName_Type" json:"T,omitempty"`
}

func (m *User_UserName) Reset()                    { *m = User_UserName{} }
func (m *User_UserName) String() string            { return proto.CompactTextString(m) }
func (*User_UserName) ProtoMessage()               {}
func (*User_UserName) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{0, 0} }

func (m *User_UserName) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *User_UserName) GetLast() string {
	if m != nil {
		return m.Last
	}
	return ""
}

func (m *User_UserName) GetT() User_UserName_Type {
	if m != nil {
		return m.T
	}
	return User_UserName_UNKNOWN
}

func init() {
	proto.RegisterType((*User)(nil), "test.User")
	proto.RegisterType((*User_UserName)(nil), "test.User.UserName")
	proto.RegisterEnum("test.User_UserName_Type", User_UserName_Type_name, User_UserName_Type_value)
}
func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.String_) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.String_)))
		i += copy(dAtA[i:], m.String_)
	}
	if len(m.Strings) > 0 {
		for _, s := range m.Strings {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Sint32 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMsg(dAtA, i, uint64((uint32(m.Sint32)<<1)^uint32((m.Sint32>>31))))
	}
	if len(m.Sint32S) > 0 {
		dAtA1 := make([]byte, len(m.Sint32S)*5)
		var j2 int
		for _, num := range m.Sint32S {
			x3 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x3 >= 1<<7 {
				dAtA1[j2] = uint8(uint64(x3)&0x7f | 0x80)
				j2++
				x3 >>= 7
			}
			dAtA1[j2] = uint8(x3)
			j2++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintMsg(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA1[:j2])
	}
	if m.Sint64 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMsg(dAtA, i, uint64((uint64(m.Sint64)<<1)^uint64((m.Sint64>>63))))
	}
	if len(m.Sint64S) > 0 {
		var j4 int
		dAtA6 := make([]byte, len(m.Sint64S)*10)
		for _, num := range m.Sint64S {
			x5 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x5 >= 1<<7 {
				dAtA6[j4] = uint8(uint64(x5)&0x7f | 0x80)
				j4++
				x5 >>= 7
			}
			dAtA6[j4] = uint8(x5)
			j4++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintMsg(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA6[:j4])
	}
	if m.Int32 != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Int32))
	}
	if len(m.Int32S) > 0 {
		dAtA8 := make([]byte, len(m.Int32S)*10)
		var j7 int
		for _, num1 := range m.Int32S {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintMsg(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if m.Int64 != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Int64))
	}
	if len(m.Int64S) > 0 {
		dAtA10 := make([]byte, len(m.Int64S)*10)
		var j9 int
		for _, num1 := range m.Int64S {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x52
		i++
		i = encodeVarintMsg(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if m.Uint32 != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Uint32))
	}
	if len(m.Uint32S) > 0 {
		dAtA12 := make([]byte, len(m.Uint32S)*10)
		var j11 int
		for _, num := range m.Uint32S {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		dAtA[i] = 0x62
		i++
		i = encodeVarintMsg(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA12[:j11])
	}
	if m.Uint64 != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Uint64))
	}
	if len(m.Uint64S) > 0 {
		dAtA14 := make([]byte, len(m.Uint64S)*10)
		var j13 int
		for _, num := range m.Uint64S {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		dAtA[i] = 0x72
		i++
		i = encodeVarintMsg(dAtA, i, uint64(j13))
		i += copy(dAtA[i:], dAtA14[:j13])
	}
	if m.Fixed32 != 0 {
		dAtA[i] = 0x7d
		i++
		i = encodeFixed32Msg(dAtA, i, uint32(m.Fixed32))
	}
	if len(m.Fixed32S) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Fixed32S)*4))
		for _, num := range m.Fixed32S {
			dAtA[i] = uint8(num)
			i++
			dAtA[i] = uint8(num >> 8)
			i++
			dAtA[i] = uint8(num >> 16)
			i++
			dAtA[i] = uint8(num >> 24)
			i++
		}
	}
	if m.Fixed64 != 0 {
		dAtA[i] = 0x89
		i++
		dAtA[i] = 0x1
		i++
		i = encodeFixed64Msg(dAtA, i, uint64(m.Fixed64))
	}
	if len(m.Fixed64S) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Fixed64S)*8))
		for _, num := range m.Fixed64S {
			dAtA[i] = uint8(num)
			i++
			dAtA[i] = uint8(num >> 8)
			i++
			dAtA[i] = uint8(num >> 16)
			i++
			dAtA[i] = uint8(num >> 24)
			i++
			dAtA[i] = uint8(num >> 32)
			i++
			dAtA[i] = uint8(num >> 40)
			i++
			dAtA[i] = uint8(num >> 48)
			i++
			dAtA[i] = uint8(num >> 56)
			i++
		}
	}
	if m.Sfixed32 != 0 {
		dAtA[i] = 0x9d
		i++
		dAtA[i] = 0x1
		i++
		i = encodeFixed32Msg(dAtA, i, uint32(m.Sfixed32))
	}
	if len(m.Sfixed32S) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Sfixed32S)*4))
		for _, num := range m.Sfixed32S {
			dAtA[i] = uint8(num)
			i++
			dAtA[i] = uint8(num >> 8)
			i++
			dAtA[i] = uint8(num >> 16)
			i++
			dAtA[i] = uint8(num >> 24)
			i++
		}
	}
	if m.Sfixed64 != 0 {
		dAtA[i] = 0xa9
		i++
		dAtA[i] = 0x1
		i++
		i = encodeFixed64Msg(dAtA, i, uint64(m.Sfixed64))
	}
	if len(m.Sfixed64S) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Sfixed64S)*8))
		for _, num := range m.Sfixed64S {
			dAtA[i] = uint8(num)
			i++
			dAtA[i] = uint8(num >> 8)
			i++
			dAtA[i] = uint8(num >> 16)
			i++
			dAtA[i] = uint8(num >> 24)
			i++
			dAtA[i] = uint8(num >> 32)
			i++
			dAtA[i] = uint8(num >> 40)
			i++
			dAtA[i] = uint8(num >> 48)
			i++
			dAtA[i] = uint8(num >> 56)
			i++
		}
	}
	if m.Float != 0 {
		dAtA[i] = 0xbd
		i++
		dAtA[i] = 0x1
		i++
		i = encodeFixed32Msg(dAtA, i, uint32(math.Float32bits(float32(m.Float))))
	}
	if len(m.Floats) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Floats)*4))
		for _, num := range m.Floats {
			f15 := math.Float32bits(float32(num))
			dAtA[i] = uint8(f15)
			i++
			dAtA[i] = uint8(f15 >> 8)
			i++
			dAtA[i] = uint8(f15 >> 16)
			i++
			dAtA[i] = uint8(f15 >> 24)
			i++
		}
	}
	if m.Double != 0 {
		dAtA[i] = 0xc9
		i++
		dAtA[i] = 0x1
		i++
		i = encodeFixed64Msg(dAtA, i, uint64(math.Float64bits(float64(m.Double))))
	}
	if len(m.Doubles) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Doubles)*8))
		for _, num := range m.Doubles {
			f16 := math.Float64bits(float64(num))
			dAtA[i] = uint8(f16)
			i++
			dAtA[i] = uint8(f16 >> 8)
			i++
			dAtA[i] = uint8(f16 >> 16)
			i++
			dAtA[i] = uint8(f16 >> 24)
			i++
			dAtA[i] = uint8(f16 >> 32)
			i++
			dAtA[i] = uint8(f16 >> 40)
			i++
			dAtA[i] = uint8(f16 >> 48)
			i++
			dAtA[i] = uint8(f16 >> 56)
			i++
		}
	}
	if m.Bool {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		if m.Bool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Bools) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Bools)))
		for _, b := range m.Bools {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if len(m.Bytes) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Bytes)))
		i += copy(dAtA[i:], m.Bytes)
	}
	if len(m.Bytess) > 0 {
		for _, b := range m.Bytess {
			dAtA[i] = 0xf2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintMsg(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.IntsPacked) > 0 {
		dAtA18 := make([]byte, len(m.IntsPacked)*10)
		var j17 int
		for _, num1 := range m.IntsPacked {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMsg(dAtA, i, uint64(j17))
		i += copy(dAtA[i:], dAtA18[:j17])
	}
	if len(m.Int32Map) > 0 {
		for k, _ := range m.Int32Map {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x2
			i++
			v := m.Int32Map[k]
			mapSize := 1 + sovMsg(uint64(k)) + 1 + len(v) + sovMsg(uint64(len(v)))
			i = encodeVarintMsg(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintMsg(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintMsg(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Stringmap) > 0 {
		for k, _ := range m.Stringmap {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x2
			i++
			v := m.Stringmap[k]
			mapSize := 1 + len(k) + sovMsg(uint64(len(k))) + 1 + len(v) + sovMsg(uint64(len(v)))
			i = encodeVarintMsg(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsg(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintMsg(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Msg != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Msg.Size()))
		n19, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if len(m.Msgs) > 0 {
		for _, msg := range m.Msgs {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintMsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Any != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Any.Size()))
		n20, err := m.Any.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if len(m.Msgmap) > 0 {
		for k, _ := range m.Msgmap {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x2
			i++
			v := m.Msgmap[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMsg(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovMsg(uint64(len(k))) + msgSize
			i = encodeVarintMsg(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsg(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMsg(dAtA, i, uint64(v.Size()))
				n21, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n21
			}
		}
	}
	return i, nil
}

func (m *User_UserName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_UserName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.First) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.First)))
		i += copy(dAtA[i:], m.First)
	}
	if len(m.Last) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Last)))
		i += copy(dAtA[i:], m.Last)
	}
	if m.T != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.T))
	}
	return i, nil
}

func encodeFixed64Msg(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Msg(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *User) Size() (n int) {
	var l int
	_ = l
	l = len(m.String_)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if len(m.Strings) > 0 {
		for _, s := range m.Strings {
			l = len(s)
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	if m.Sint32 != 0 {
		n += 1 + sozMsg(uint64(m.Sint32))
	}
	if len(m.Sint32S) > 0 {
		l = 0
		for _, e := range m.Sint32S {
			l += sozMsg(uint64(e))
		}
		n += 1 + sovMsg(uint64(l)) + l
	}
	if m.Sint64 != 0 {
		n += 1 + sozMsg(uint64(m.Sint64))
	}
	if len(m.Sint64S) > 0 {
		l = 0
		for _, e := range m.Sint64S {
			l += sozMsg(uint64(e))
		}
		n += 1 + sovMsg(uint64(l)) + l
	}
	if m.Int32 != 0 {
		n += 1 + sovMsg(uint64(m.Int32))
	}
	if len(m.Int32S) > 0 {
		l = 0
		for _, e := range m.Int32S {
			l += sovMsg(uint64(e))
		}
		n += 1 + sovMsg(uint64(l)) + l
	}
	if m.Int64 != 0 {
		n += 1 + sovMsg(uint64(m.Int64))
	}
	if len(m.Int64S) > 0 {
		l = 0
		for _, e := range m.Int64S {
			l += sovMsg(uint64(e))
		}
		n += 1 + sovMsg(uint64(l)) + l
	}
	if m.Uint32 != 0 {
		n += 1 + sovMsg(uint64(m.Uint32))
	}
	if len(m.Uint32S) > 0 {
		l = 0
		for _, e := range m.Uint32S {
			l += sovMsg(uint64(e))
		}
		n += 1 + sovMsg(uint64(l)) + l
	}
	if m.Uint64 != 0 {
		n += 1 + sovMsg(uint64(m.Uint64))
	}
	if len(m.Uint64S) > 0 {
		l = 0
		for _, e := range m.Uint64S {
			l += sovMsg(uint64(e))
		}
		n += 1 + sovMsg(uint64(l)) + l
	}
	if m.Fixed32 != 0 {
		n += 5
	}
	if len(m.Fixed32S) > 0 {
		n += 2 + sovMsg(uint64(len(m.Fixed32S)*4)) + len(m.Fixed32S)*4
	}
	if m.Fixed64 != 0 {
		n += 10
	}
	if len(m.Fixed64S) > 0 {
		n += 2 + sovMsg(uint64(len(m.Fixed64S)*8)) + len(m.Fixed64S)*8
	}
	if m.Sfixed32 != 0 {
		n += 6
	}
	if len(m.Sfixed32S) > 0 {
		n += 2 + sovMsg(uint64(len(m.Sfixed32S)*4)) + len(m.Sfixed32S)*4
	}
	if m.Sfixed64 != 0 {
		n += 10
	}
	if len(m.Sfixed64S) > 0 {
		n += 2 + sovMsg(uint64(len(m.Sfixed64S)*8)) + len(m.Sfixed64S)*8
	}
	if m.Float != 0 {
		n += 6
	}
	if len(m.Floats) > 0 {
		n += 2 + sovMsg(uint64(len(m.Floats)*4)) + len(m.Floats)*4
	}
	if m.Double != 0 {
		n += 10
	}
	if len(m.Doubles) > 0 {
		n += 2 + sovMsg(uint64(len(m.Doubles)*8)) + len(m.Doubles)*8
	}
	if m.Bool {
		n += 3
	}
	if len(m.Bools) > 0 {
		n += 2 + sovMsg(uint64(len(m.Bools))) + len(m.Bools)*1
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 2 + l + sovMsg(uint64(l))
	}
	if len(m.Bytess) > 0 {
		for _, b := range m.Bytess {
			l = len(b)
			n += 2 + l + sovMsg(uint64(l))
		}
	}
	if len(m.IntsPacked) > 0 {
		l = 0
		for _, e := range m.IntsPacked {
			l += sovMsg(uint64(e))
		}
		n += 2 + sovMsg(uint64(l)) + l
	}
	if len(m.Int32Map) > 0 {
		for k, v := range m.Int32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMsg(uint64(k)) + 1 + len(v) + sovMsg(uint64(len(v)))
			n += mapEntrySize + 2 + sovMsg(uint64(mapEntrySize))
		}
	}
	if len(m.Stringmap) > 0 {
		for k, v := range m.Stringmap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMsg(uint64(len(k))) + 1 + len(v) + sovMsg(uint64(len(v)))
			n += mapEntrySize + 2 + sovMsg(uint64(mapEntrySize))
		}
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 2 + l + sovMsg(uint64(l))
	}
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 2 + l + sovMsg(uint64(l))
		}
	}
	if m.Any != nil {
		l = m.Any.Size()
		n += 2 + l + sovMsg(uint64(l))
	}
	if len(m.Msgmap) > 0 {
		for k, v := range m.Msgmap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMsg(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMsg(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovMsg(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *User_UserName) Size() (n int) {
	var l int
	_ = l
	l = len(m.First)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Last)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.T != 0 {
		n += 1 + sovMsg(uint64(m.T))
	}
	return n
}

func sovMsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strings = append(m.Strings, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Sint32 = v
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.Sint32S = append(m.Sint32S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.Sint32S = append(m.Sint32S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint32S", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint64", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Sint64 = int64(v)
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.Sint64S = append(m.Sint64S, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.Sint64S = append(m.Sint64S, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint64S", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32", wireType)
			}
			m.Int32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int32 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Int32S = append(m.Int32S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Int32S = append(m.Int32S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32S", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			m.Int64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Int64S = append(m.Int64S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Int64S = append(m.Int64S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64S", wireType)
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32", wireType)
			}
			m.Uint32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint32 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uint32S = append(m.Uint32S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uint32S = append(m.Uint32S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32S", wireType)
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64", wireType)
			}
			m.Uint64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint64 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uint64S = append(m.Uint64S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uint64S = append(m.Uint64S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64S", wireType)
			}
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed32", wireType)
			}
			m.Fixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.Fixed32 = uint32(dAtA[iNdEx-4])
			m.Fixed32 |= uint32(dAtA[iNdEx-3]) << 8
			m.Fixed32 |= uint32(dAtA[iNdEx-2]) << 16
			m.Fixed32 |= uint32(dAtA[iNdEx-1]) << 24
		case 16:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				v = uint32(dAtA[iNdEx-4])
				v |= uint32(dAtA[iNdEx-3]) << 8
				v |= uint32(dAtA[iNdEx-2]) << 16
				v |= uint32(dAtA[iNdEx-1]) << 24
				m.Fixed32S = append(m.Fixed32S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 4
					v = uint32(dAtA[iNdEx-4])
					v |= uint32(dAtA[iNdEx-3]) << 8
					v |= uint32(dAtA[iNdEx-2]) << 16
					v |= uint32(dAtA[iNdEx-1]) << 24
					m.Fixed32S = append(m.Fixed32S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed32S", wireType)
			}
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed64", wireType)
			}
			m.Fixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.Fixed64 = uint64(dAtA[iNdEx-8])
			m.Fixed64 |= uint64(dAtA[iNdEx-7]) << 8
			m.Fixed64 |= uint64(dAtA[iNdEx-6]) << 16
			m.Fixed64 |= uint64(dAtA[iNdEx-5]) << 24
			m.Fixed64 |= uint64(dAtA[iNdEx-4]) << 32
			m.Fixed64 |= uint64(dAtA[iNdEx-3]) << 40
			m.Fixed64 |= uint64(dAtA[iNdEx-2]) << 48
			m.Fixed64 |= uint64(dAtA[iNdEx-1]) << 56
		case 18:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				v = uint64(dAtA[iNdEx-8])
				v |= uint64(dAtA[iNdEx-7]) << 8
				v |= uint64(dAtA[iNdEx-6]) << 16
				v |= uint64(dAtA[iNdEx-5]) << 24
				v |= uint64(dAtA[iNdEx-4]) << 32
				v |= uint64(dAtA[iNdEx-3]) << 40
				v |= uint64(dAtA[iNdEx-2]) << 48
				v |= uint64(dAtA[iNdEx-1]) << 56
				m.Fixed64S = append(m.Fixed64S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 8
					v = uint64(dAtA[iNdEx-8])
					v |= uint64(dAtA[iNdEx-7]) << 8
					v |= uint64(dAtA[iNdEx-6]) << 16
					v |= uint64(dAtA[iNdEx-5]) << 24
					v |= uint64(dAtA[iNdEx-4]) << 32
					v |= uint64(dAtA[iNdEx-3]) << 40
					v |= uint64(dAtA[iNdEx-2]) << 48
					v |= uint64(dAtA[iNdEx-1]) << 56
					m.Fixed64S = append(m.Fixed64S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed64S", wireType)
			}
		case 19:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed32", wireType)
			}
			m.Sfixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.Sfixed32 = int32(dAtA[iNdEx-4])
			m.Sfixed32 |= int32(dAtA[iNdEx-3]) << 8
			m.Sfixed32 |= int32(dAtA[iNdEx-2]) << 16
			m.Sfixed32 |= int32(dAtA[iNdEx-1]) << 24
		case 20:
			if wireType == 5 {
				var v int32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				v = int32(dAtA[iNdEx-4])
				v |= int32(dAtA[iNdEx-3]) << 8
				v |= int32(dAtA[iNdEx-2]) << 16
				v |= int32(dAtA[iNdEx-1]) << 24
				m.Sfixed32S = append(m.Sfixed32S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 4
					v = int32(dAtA[iNdEx-4])
					v |= int32(dAtA[iNdEx-3]) << 8
					v |= int32(dAtA[iNdEx-2]) << 16
					v |= int32(dAtA[iNdEx-1]) << 24
					m.Sfixed32S = append(m.Sfixed32S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed32S", wireType)
			}
		case 21:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed64", wireType)
			}
			m.Sfixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.Sfixed64 = int64(dAtA[iNdEx-8])
			m.Sfixed64 |= int64(dAtA[iNdEx-7]) << 8
			m.Sfixed64 |= int64(dAtA[iNdEx-6]) << 16
			m.Sfixed64 |= int64(dAtA[iNdEx-5]) << 24
			m.Sfixed64 |= int64(dAtA[iNdEx-4]) << 32
			m.Sfixed64 |= int64(dAtA[iNdEx-3]) << 40
			m.Sfixed64 |= int64(dAtA[iNdEx-2]) << 48
			m.Sfixed64 |= int64(dAtA[iNdEx-1]) << 56
		case 22:
			if wireType == 1 {
				var v int64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				v = int64(dAtA[iNdEx-8])
				v |= int64(dAtA[iNdEx-7]) << 8
				v |= int64(dAtA[iNdEx-6]) << 16
				v |= int64(dAtA[iNdEx-5]) << 24
				v |= int64(dAtA[iNdEx-4]) << 32
				v |= int64(dAtA[iNdEx-3]) << 40
				v |= int64(dAtA[iNdEx-2]) << 48
				v |= int64(dAtA[iNdEx-1]) << 56
				m.Sfixed64S = append(m.Sfixed64S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 8
					v = int64(dAtA[iNdEx-8])
					v |= int64(dAtA[iNdEx-7]) << 8
					v |= int64(dAtA[iNdEx-6]) << 16
					v |= int64(dAtA[iNdEx-5]) << 24
					v |= int64(dAtA[iNdEx-4]) << 32
					v |= int64(dAtA[iNdEx-3]) << 40
					v |= int64(dAtA[iNdEx-2]) << 48
					v |= int64(dAtA[iNdEx-1]) << 56
					m.Sfixed64S = append(m.Sfixed64S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed64S", wireType)
			}
		case 23:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Float = float32(math.Float32frombits(v))
		case 24:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				v = uint32(dAtA[iNdEx-4])
				v |= uint32(dAtA[iNdEx-3]) << 8
				v |= uint32(dAtA[iNdEx-2]) << 16
				v |= uint32(dAtA[iNdEx-1]) << 24
				v2 := float32(math.Float32frombits(v))
				m.Floats = append(m.Floats, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 4
					v = uint32(dAtA[iNdEx-4])
					v |= uint32(dAtA[iNdEx-3]) << 8
					v |= uint32(dAtA[iNdEx-2]) << 16
					v |= uint32(dAtA[iNdEx-1]) << 24
					v2 := float32(math.Float32frombits(v))
					m.Floats = append(m.Floats, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Floats", wireType)
			}
		case 25:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Double", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Double = float64(math.Float64frombits(v))
		case 26:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				v = uint64(dAtA[iNdEx-8])
				v |= uint64(dAtA[iNdEx-7]) << 8
				v |= uint64(dAtA[iNdEx-6]) << 16
				v |= uint64(dAtA[iNdEx-5]) << 24
				v |= uint64(dAtA[iNdEx-4]) << 32
				v |= uint64(dAtA[iNdEx-3]) << 40
				v |= uint64(dAtA[iNdEx-2]) << 48
				v |= uint64(dAtA[iNdEx-1]) << 56
				v2 := float64(math.Float64frombits(v))
				m.Doubles = append(m.Doubles, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 8
					v = uint64(dAtA[iNdEx-8])
					v |= uint64(dAtA[iNdEx-7]) << 8
					v |= uint64(dAtA[iNdEx-6]) << 16
					v |= uint64(dAtA[iNdEx-5]) << 24
					v |= uint64(dAtA[iNdEx-4]) << 32
					v |= uint64(dAtA[iNdEx-3]) << 40
					v |= uint64(dAtA[iNdEx-2]) << 48
					v |= uint64(dAtA[iNdEx-1]) << 56
					v2 := float64(math.Float64frombits(v))
					m.Doubles = append(m.Doubles, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Doubles", wireType)
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bool = bool(v != 0)
		case 28:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bools = append(m.Bools, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bools = append(m.Bools, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bools", wireType)
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytess", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytess = append(m.Bytess, make([]byte, postIndex-iNdEx))
			copy(m.Bytess[len(m.Bytess)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IntsPacked = append(m.IntsPacked, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IntsPacked = append(m.IntsPacked, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IntsPacked", wireType)
			}
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.Int32Map == nil {
				m.Int32Map = make(map[int32]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthMsg
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Int32Map[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Int32Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stringmap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMsg
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Stringmap == nil {
				m.Stringmap = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthMsg
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Stringmap[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Stringmap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &User_UserName{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &User_UserName{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Any", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Any == nil {
				m.Any = &google_protobuf.Any{}
			}
			if err := m.Any.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgmap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMsg
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Msgmap == nil {
				m.Msgmap = make(map[string]*User_UserName)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthMsg
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthMsg
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &User_UserName{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Msgmap[mapkey] = mapvalue
			} else {
				var mapvalue *User_UserName
				m.Msgmap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_UserName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.First = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Last = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= (User_UserName_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("test/msg.proto", fileDescriptorMsg) }

var fileDescriptorMsg = []byte{
	// 726 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xdf, 0x4e, 0x7b, 0x45,
	0x10, 0xc7, 0xd9, 0xee, 0xe9, 0xbf, 0x2d, 0x2d, 0x87, 0x05, 0x71, 0xa9, 0x58, 0xc7, 0x2a, 0x38,
	0xde, 0x1c, 0x92, 0xd2, 0x54, 0xa3, 0xde, 0x40, 0x94, 0x84, 0x28, 0xd5, 0x0c, 0x34, 0x5e, 0x17,
	0x39, 0x34, 0x0d, 0xa5, 0x87, 0x74, 0x0f, 0x86, 0xbe, 0x85, 0x8f, 0xe5, 0xa5, 0x8f, 0x60, 0xf0,
	0x15, 0x7c, 0x80, 0x5f, 0xf6, 0xdf, 0x69, 0x49, 0xf8, 0xe5, 0x77, 0x03, 0xf3, 0x99, 0x99, 0xef,
	0xcc, 0x74, 0xf6, 0xec, 0x8a, 0x56, 0x9e, 0xea, 0xfc, 0xf8, 0x41, 0x4f, 0x92, 0xc7, 0x45, 0x96,
	0x67, 0x32, 0x32, 0xdc, 0xde, 0x9f, 0x64, 0xd9, 0x64, 0x96, 0x1e, 0x5b, 0xdf, 0xcd, 0xd3, 0xdd,
	0xf1, 0x78, 0xbe, 0x74, 0x09, 0xdd, 0xff, 0x85, 0x88, 0x46, 0x3a, 0x5d, 0xc8, 0x3d, 0x51, 0xb9,
	0xca, 0x17, 0xd3, 0xf9, 0x44, 0x31, 0x60, 0x58, 0x27, 0x4f, 0x52, 0x89, 0xaa, 0xb3, 0xb4, 0x2a,
	0x01, 0xc7, 0x3a, 0x05, 0xb4, 0x8a, 0xe9, 0x3c, 0x3f, 0xe9, 0x29, 0x0e, 0x0c, 0xb7, 0xc9, 0x93,
	0x55, 0x58, 0x4b, 0xab, 0x08, 0x38, 0x6e, 0x53, 0xc0, 0xa0, 0x18, 0xf4, 0x55, 0x19, 0x18, 0x4a,
	0xf2, 0x14, 0x14, 0x83, 0xbe, 0x56, 0x15, 0xe0, 0x28, 0x29, 0xa0, 0xdc, 0x15, 0xe5, 0x0b, 0xdb,
	0xa2, 0x0a, 0x0c, 0xcb, 0xe4, 0xc0, 0xd4, 0xb9, 0x70, 0x0d, 0x6a, 0xc0, 0xb1, 0x4c, 0x9e, 0x7c,
	0xf6, 0xa0, 0xaf, 0xea, 0xc0, 0x90, 0x93, 0x03, 0x9f, 0x6d, 0x8a, 0x0b, 0xe0, 0xc8, 0xc9, 0x93,
	0xf1, 0x8f, 0xdc, 0xfc, 0x0d, 0x60, 0xd8, 0x24, 0x4f, 0x66, 0x9a, 0x91, 0x9f, 0x7f, 0x13, 0x38,
	0x36, 0x29, 0x60, 0x50, 0x0c, 0xfa, 0xaa, 0x09, 0x0c, 0x23, 0xf2, 0x14, 0x14, 0xa6, 0x45, 0x0b,
	0x38, 0x46, 0x14, 0xd0, 0x44, 0xce, 0xa7, 0xcf, 0xe9, 0xed, 0x49, 0x4f, 0x6d, 0x01, 0xc3, 0x2a,
	0x05, 0x94, 0x6d, 0x51, 0xf3, 0xa6, 0x56, 0x31, 0x70, 0xac, 0x52, 0xc1, 0x85, 0x6a, 0xd0, 0x57,
	0xdb, 0xc0, 0xb0, 0x42, 0x01, 0x0b, 0x95, 0x69, 0x25, 0x81, 0x63, 0x85, 0x0a, 0x36, 0xb1, 0xab,
	0x3b, 0xdf, 0x6c, 0x07, 0x18, 0x6e, 0x51, 0xc1, 0xf2, 0x40, 0xd4, 0x83, 0xad, 0xd5, 0x2e, 0x70,
	0xdc, 0xa2, 0x95, 0x63, 0xa5, 0x1c, 0xf4, 0xd5, 0x47, 0xc0, 0x30, 0xa6, 0x82, 0x57, 0x4a, 0xd3,
	0x72, 0x0f, 0x38, 0xc6, 0xb4, 0x72, 0x98, 0x8d, 0x9f, 0xcf, 0xb2, 0x71, 0xae, 0x3e, 0x06, 0x86,
	0x25, 0x72, 0x60, 0xf6, 0x64, 0x0d, 0xad, 0x14, 0x70, 0x2c, 0x91, 0x27, 0xe3, 0xff, 0x31, 0x7b,
	0xba, 0x99, 0xa5, 0x6a, 0x1f, 0x18, 0x32, 0xf2, 0x64, 0x7e, 0xaf, 0xb3, 0xb4, 0x6a, 0x03, 0x47,
	0x46, 0x01, 0xa5, 0x14, 0xd1, 0x59, 0x96, 0xcd, 0xd4, 0x27, 0xc0, 0xb0, 0x46, 0xd6, 0x36, 0x3d,
	0xcd, 0x7f, 0xad, 0x0e, 0x80, 0x63, 0x8d, 0x1c, 0x58, 0xef, 0x32, 0x4f, 0xb5, 0xfa, 0x14, 0x18,
	0x6e, 0x92, 0x03, 0xd3, 0xd1, 0x1a, 0x5a, 0x75, 0x80, 0xe3, 0x26, 0x79, 0x92, 0x5d, 0x21, 0x2e,
	0xe6, 0xb9, 0xfe, 0x6d, 0xfc, 0xc7, 0x7d, 0x7a, 0xab, 0x3e, 0x33, 0x5f, 0xd1, 0x59, 0x29, 0x66,
	0xb4, 0xe6, 0x95, 0x7d, 0x51, 0xb3, 0xdf, 0xd5, 0xc3, 0xf8, 0x51, 0x01, 0x70, 0x6c, 0xf4, 0x54,
	0x62, 0xae, 0x53, 0x62, 0xee, 0x4b, 0x12, 0x42, 0x3f, 0xcd, 0xf3, 0xc5, 0x92, 0x8a, 0x4c, 0xf9,
	0x8d, 0xa8, 0xbb, 0x0b, 0x62, 0x64, 0x9f, 0x5b, 0xd9, 0xfe, 0x9a, 0xac, 0x88, 0x39, 0xdd, 0x2a,
	0x57, 0x1e, 0x0a, 0x7e, 0xa9, 0x27, 0xaa, 0x0b, 0x0c, 0x1b, 0xbd, 0x9d, 0x35, 0x89, 0xf9, 0x33,
	0x1c, 0x3f, 0xa4, 0x64, 0xe2, 0xf2, 0x2b, 0x11, 0x5d, 0xea, 0x89, 0x56, 0x5f, 0xd8, 0xd2, 0x6f,
	0xe6, 0xd9, 0x04, 0x79, 0x24, 0xf8, 0xe9, 0x7c, 0xa9, 0xbe, 0xb4, 0xf5, 0x76, 0x13, 0xf7, 0x04,
	0x24, 0xe1, 0x09, 0x48, 0x4e, 0xe7, 0x4b, 0x32, 0x09, 0x32, 0x11, 0x95, 0x4b, 0x6d, 0xa7, 0x3d,
	0xb4, 0x25, 0xf7, 0xd6, 0x4a, 0xba, 0x80, 0x1b, 0xd5, 0x67, 0xb5, 0x9f, 0x45, 0x2d, 0x74, 0xb2,
	0xc7, 0x3f, 0x5d, 0xe8, 0xdc, 0xbf, 0x19, 0x0e, 0xcc, 0xa1, 0xfd, 0x32, 0xd6, 0xb9, 0x2a, 0x59,
	0xa7, 0xb5, 0xe5, 0x91, 0x60, 0xd7, 0x2a, 0x02, 0x86, 0xad, 0x57, 0x5b, 0x0c, 0x95, 0x92, 0xeb,
	0xe5, 0x63, 0x4a, 0xec, 0xba, 0xdb, 0x16, 0x91, 0x31, 0x65, 0x43, 0x54, 0x47, 0xc3, 0x9f, 0x87,
	0xbf, 0xfe, 0x3e, 0x8c, 0x37, 0x64, 0x59, 0xb0, 0xd3, 0x98, 0xb5, 0xbf, 0x17, 0xcd, 0x57, 0x5b,
	0x97, 0xb1, 0xe0, 0xf7, 0xe9, 0xd2, 0x36, 0x2f, 0x93, 0x31, 0xcd, 0x40, 0x7f, 0x8e, 0x67, 0x4f,
	0xa9, 0xef, 0xed, 0xe0, 0xbb, 0xd2, 0xb7, 0xac, 0xfd, 0x83, 0x68, 0xbd, 0xde, 0xfd, 0xba, 0xba,
	0xfe, 0x21, 0xf5, 0x50, 0x34, 0xd6, 0x76, 0xf1, 0x86, 0xf4, 0xeb, 0x75, 0xe9, 0x7b, 0xce, 0x65,
	0x55, 0xef, 0x2c, 0xfe, 0xfb, 0xa5, 0xc3, 0xfe, 0x79, 0xe9, 0xb0, 0x7f, 0x5f, 0x3a, 0xec, 0xaf,
	0xff, 0x3a, 0x1b, 0x37, 0x15, 0x7b, 0x32, 0x27, 0xef, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x67,
	0x76, 0x18, 0xc2, 0x05, 0x00, 0x00,
}
